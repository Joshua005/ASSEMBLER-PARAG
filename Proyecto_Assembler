.MODEL SMALL
.STACK 256  

    CR EQU 13D
    LF EQU 10D 
    
.DATA    
    
    ;ARRAY---------------------------------------------------------------------
    RESP1 DB 80 DUP (0)
    RANDOM_NUM DW 0 ; VARIABLE PARA ALMACENAR EL NUMERO ALEATORIO             
    RANDOM_CADENA DB 80 DUP(0) ; ESPACIO PARA ALMACENAR LA CADENA GENERADA
    LENG_LISTA DW 5  
    
    ;TIEMPO--------------------------------------------------------------------
    TEMP DW 100  
    
    ;MENSAJES------------------------------------------------------------------
    SALTO_DL DB 13,10,'$'
    MENSAJE_NIVEL DB 'NIVEL ' 
    NIVEL DB '1', 0 
    ERROR DB 'PERDISTE $'
    
.CODE       

START:  
    MOV AX, @DATA
    MOV DS, AX     
    
    ; MUESTRA EL NIVEL 1 EN EL QUE TE ENCUENTRAS
    MOV AX, OFFSET MENSAJE_NIVEL
    CALL PUT_STR
        
    ; REALIZA UN SALTO DE LISTA
    MOV DX, OFFSET SALTO_DL
    CALL PUTS
                  
    ; GENERAR LA CADENA ALEATORIA
    CALL CREAR_CADENA_ALEATORIA 

    ; MOSTRAR LA CADENA ALEATORIA EN PANTALLA
    MOV AX, OFFSET RANDOM_CADENA
    CALL PUT_STR
    CALL DELAY_TEXT
    
    

    ;LIMPIAR PANTALLA
    CALL LIMPIAR_PANTALLA  
    
    ;LEE LO QUE INGRESO EL USUARIO
    MOV AX, OFFSET RESP1      
    CALL GET_STR   
                      
    ;SETEA EL CONTADOR DE INDICES
    MOV SI, 0     
    
    ;COMPARA LO QUE ESTA EN PREG1 Y RESP1 
    CALL COMPARAR
                        
    CALL END_PROGRAM  ; FIN DEL PROGRAMA UNU 
    
    COMPARAR:         
         
        MOV BH, RANDOM_CADENA[SI] 
        
        MOV AL, BH
        CALL PUTC  
         
        CMP RESP1[SI], BH   
        
        ;SI SON IGUALES
        JE INCREMENTAR
        
        ;SINO
        JMP END_PROGRAM  
    
    INCREMENTAR:
        INC SI                       ; AVANZA AL SIGUIENTE CARÁCTER
        CMP RANDOM_CADENA[SI], 0     ; ¿HEMOS LLEGADO AL FINAL DE LA CADENA?
        JNE COMPARAR                 ; SI NO, SIGUE VERIFICANDO
    
        ; SI TODA LA SECUENCIA ES CORRECTA
        CALL LIMPIAR_PANTALLA
        INC NIVEL                    ; INCREMENTA EL CONTADOR DE RONDAS
        INC LENG_LISTA
        MOV AX, OFFSET MENSAJE_NIVEL
        CALL PUT_STR                 ; MUESTRA MENSAJE DE ÉXITO
       
        CALL CREAR_CADENA_ALEATORIA  ; GENERA UNA NUEVA RONDA
        MOV DX,OFFSET SALTO_DL
        CALL PUTS
        MOV AX, OFFSET RANDOM_CADENA
        CALL PUT_STR
        CALL DELAY_TEXT
        CALL LIMPIAR_PANTALLA
        MOV AX, OFFSET RESP1
        CALL GET_STR
        
        CALL COMPARAR
          
    PUT_STR: ; EXHIBE EL CARACTER TERMINADO CON 0 CUYA DIRECCION ESTA EN AX
        PUSH AX ; GUARDA REGISTROS
        PUSH BX
        PUSH CX
        PUSH DX
        MOV BX, AX ; ALMACENA DIRECCION EN BX
        MOV AL, BYTE PTR [BX] ; AL = PRIMER CARACTER EN EL STRING

    PUT_LOOP: CMP AL, 0 ; AL == 0 ?
        JE PUT_FIN ; MIENTRAS AL != 0
        CALL PUTC ; EXHIBE CARACTER
        INC BX ; BX = BX + 1
        MOV AL, BYTE PTR [BX] ; AL = SIGUIENTE CARACTER EN EL STRING
        JMP PUT_LOOP ; REPITE LA PRUEBA DEL BUCLE           
        

    PUT_FIN:
        POP DX ; 
        POP CX
        POP BX
        POP AX
        RET

    GET_STR: ;  LEE EL STRING TERMINADO POR CR DENTRO DEL ARREGLO CUYA DIRECCION ESTA EN AX
        PUSH AX ; GUARDA REGISTROS
        PUSH BX
        PUSH CX
        PUSH DX
        MOV BX, AX
        CALL GETC ; LEE EL PRIMER CARACTER
        MOV BYTE PTR [BX], AL ; EN C: STR[I] = AL

    GET_LOOP:
        CMP AL, 13 ; AL == CR ?
        JE GET_FIN ;MIENTRAS AL != CR
        INC BX ; BX = BX + 1
        CALL GETC ; LEE EL SIGUIENTE CARACTER
        MOV BYTE PTR [BX], AL ; IN C: STR[I] = AL      
        
        JMP GET_LOOP ; REPITE LA PRUEBA DEL BUCLE

    GET_FIN: MOV BYTE PTR [BX], 0 ; STRING TERMINADO CON 0
        POP DX 
        POP CX
        POP BX
        POP AX
        RET
    
    PUTC: ; EXHIBE CARACTER EN A1
        PUSH AX ; GUARDA AX
        PUSH BX ; GUARDA BX
        PUSH CX ; GUARDA CX
        PUSH DX ; GUARDA DX
        MOV DL, AL
        MOV AH, 2H
        INT 21H
        POP DX ; REPONE DX
        POP CX ; REPONE CX
        POP BX ; REPONE BX
        POP AX ;REPONE AX
        RET
          
    PUTS:
        PUSH AX ; GUARDA AX
        PUSH BX ; GUARDA BX
        PUSH CX ; GUARDA CX
        PUSH DX ; GUARDA DX
        MOV AH, 9H
        INT 21H
        POP DX ; REPONE DX
        POP CX ; REPONE CX
        POP BX ; REPONE BX
        POP AX ;REPONE AX
        RET   

    GETC: ; LEE CARACTER DENTRO DE AL
        PUSH BX ; GUARDA BX
        PUSH CX ;GUARDA CX
        PUSH DX ; GUARDA DX
        MOV AH, 1H
        INT 21H
        POP DX ; REPONE DX
        POP CX ; REPONE CX
        POP BX ; REPONE BX
        RET   
          
        
    LIMPIAR_PANTALLA:         ;LIMPIA LA PANTALLA DEL MS-DOS
        PUSH AX ; SAVE AX
        PUSH BX ; SAVE BX
        PUSH CX ; SAVE CX
        PUSH DX ; SAVE DX
        MOV AH,00H
        MOV AL,03H       
        INT 10H
        POP DX ; RESTORE DX
        POP CX ; RESTORE CX
        POP BX ; RESTORE BX
        POP AX ; RESTORE AX    
        RET                   
              
    GET_RANDOM_NUM:                      
        PUSH CX         ;GUARDO EN LA PILA EL VALOR DE CX
        MOV AH, 0H      ;INTERRUMPE PARA TENER LA HORA EN TIEMPO REAL DEL SISTEMA
        INT 1AH         ;LA HORA SE GUARDARA EN DX
        POP CX          ;RECUPERO EL VALOR GUARDADO EN CX
        MOV AX, DX      ;MOVER LA HORA A AX
        XOR DX, DX      ;LIMPIAR DX 
        MOV BX, 10      ; BX = 10 DIVISOR PARA GENERAR UN NUMERO ENTRE 0 Y 9
        DIV BX          ; DIVIDE AX CON BX  
       
        MOV RANDOM_NUM, DX ; SE OBTIENE LA DIVISION DE DL Y LO GUARDA EN VARIABLE RANDOM_NUM 
        RET   
                       
    CREAR_CADENA_ALEATORIA:
        PUSH AX       ; GUARDA REGISTROS
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI

        MOV CX, LENG_LISTA   ; TAMANHO DE LA CADENA (PUEDES CAMBIAR ESTE VALOR)
        LEA DI, RANDOM_CADENA ; CARGA LA DIRECCIÃ³N DONDE SE ALMACENARÃ¡ LA CADENA

    GENERAR_NUMERO:
        CALL GET_RANDOM_NUM ; GENERA UN NUMERO ALEATORIO (0-9)
        MOV BX, 36          ; QUEREMOS UN RANGO DE 0-35 PARA INCLUIR NÃºMEROS Y LETRAS
        DIV BX              ; DIVIDE AX ENTRE 36
        CMP DL, 10          ; COMPARA SI EL NUMERO ES MENOR QUE 10
        JL ES_NUMERO        ; SI ES MENOR QUE 10, ES UN NÃºMERO
        ADD DL, 'A' - 10    ; SI ES MAYOR O IGUAL A 10, CONVIÃ©RTELO EN UNA LETRA (A-Z)
        JMP ALMACENAR

    ES_NUMERO:
        ADD DL, '0'         ; CONVIERTE EL NÃºMERO EN CARÃ¡CTER ASCII

    ALMACENAR:
        MOV [DI], DL        ; ALMACENA EL CARÃ¡CTER EN LA CADENA
        INC DI              ; AVANZA AL SIGUIENTE ESPACIO EN LA CADENA
        LOOP GENERAR_NUMERO ; REPITE HASTA COMPLETAR LA LONGITUD DESEADA

        MOV BYTE PTR [DI], 0 ; TERMINA LA CADENA CON UN CARÃ¡CTER NULO
        POP DI
        POP SI
        POP DX
        POP CX
        POP BX
        POP AX
        RET
               
    DELAY_TEXT:
        PUSH CX
        PUSH DX
        MOV AH,86H      ;LA FUNC QUE HACE ESPERAR
        MOV CX,000FH    ;EN ESTE CASO UN MILLON DE MICRO SEGUNDOS
        MOV DX,4240H
        INT 15H         
        POP DX
        POP CX
        RET        
               
    END_PROGRAM:
        CALL LIMPIAR_PANTALLA
        MOV DX, OFFSET ERROR
        CALL PUTS

        MOV AX, 4C00H
        INT 21H ; TERMINADO, VOLVER A DOS    
        
END START
