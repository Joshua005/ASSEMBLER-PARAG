.MODEL SMALL
.STACK 256  
.DATA    

    ; DefiniciÃ³n de variables y mensajes
    MAX_NIVEL DW 10 ; Número máximo de niveles permitido
    RESP1 DB 80 DUP (0) ; Espacio para la respuesta del usuario
    RANDOM_NUM DW 0 ; Variable para almacenar el numero aleatorio             
    RANDOM_CADENA DB 80 DUP(0) ; Espacio para almacenar la cadena generada
    LENG_LISTA DW 5 ; Longitud de la lista 
    ; Mensajes
    
    SALTO_DL DB 13,10,'$' ; Salto de linea
    MENSAJE_NIVEL DB 'NIVEL ' 
    NIVEL DB '1', 0 
    ERROR DB 'PERDISTE', 13, 10, '$'  
    MENSAJE_CONTINUAR DB ' *DESEAS VOLVER A JUGAR? (S/N): $'       
    MENSAJE_FELICIDADES DB 'FELICIDADES' , 13, 10, '$'
    MENSAJE_GANASTE DB 'GANASTE' , 13, 10, '$'
    LLEGASTE_NV DB 'LLEGASTE AL NIVEL $'
    MENSAJE_RESPUESTA DB 'RESPUESTA CORRECTA: $'
    MENSAJE_USUARIO DB 'RESPUESTA INGRESADA: $' 
    MENSAJE_PUNTUACION DB ', CON UNA PUNTUACION DE $' 
    PUNTUACION DW 0   
    CANT_ACIERTOS DW 0
    MENSAJE_CANT_ACIERTOS DB 'CANTIDAD DE ACIERTOS: $'
    
.CODE       

START:  
    MOV AX, @DATA
    MOV DS, AX     
    
    ; Muestra el nivel en el que te encuentras
    MOV AX, OFFSET MENSAJE_NIVEL
    CALL PUT_STR
        
    ; Realiza un salto de linea
    MOV DX, OFFSET SALTO_DL
    CALL PUTS
                  
    ; Generar la cadena aleatoria
    CALL CREAR_CADENA_ALEATORIA 

    ; Mostrar la cadena aleatoria en pantalla
    MOV AX, OFFSET RANDOM_CADENA
    CALL PUT_STR
    CALL DELAY_TEXT

    ; Limpiar pantalla
    CALL LIMPIAR_PANTALLA  
    
    ; Leer lo que ingresÃ³ el usuario
    MOV AX, OFFSET RESP1      
    CALL GET_STR_TIMER   
                      
    ; Setea el contador de indices
    MOV SI, 0     
    
    ; Compara lo que esta en RANDOM_CADENA y RESP1 
    CALL COMPARAR
                        
    CALL END_PROGRAM  ; Fin del programa
    
    COMPARAR:         
        MOV BH, RANDOM_CADENA[SI] 
        MOV AL, BH
        CALL PUTC  
        CMP RESP1[SI], BH   
        
        ; Si son iguales
        JE INCREMENTAR 
        
        ; Si no
        JMP END_PROGRAM  
    
    INCREMENTAR:
        INC SI                       ; Avanza al siguiente caracter   
        INC PUNTUACION               ; Incrementa el puntaje por cada acierto 
        CMP RANDOM_CADENA[SI], 0     ; Â¿Hemos llegado al final de la cadena?
        JNE COMPARAR                 ; Si no, sigue verificando     
        
        ; Si toda la secuencia es correcta
        CALL LIMPIAR_PANTALLA
        INC NIVEL                    ; Incrementa el contador de rondas 
        MOV AX, LENG_LISTA                ; Cargar el nivel actual
        MOV BX, MAX_NIVEL            ; Cargar el nivel máximo permitido
        CMP AX, BX 
                 ; ¿Se alcanzó el nivel máximo?
        JE COMPLETADO
        
        INC LENG_LISTA               ; Aumenta la longitud de la lista
        ADD PUNTUACION, 10           ; Aumenta puntos por nivel completado
    
        MOV AX, OFFSET MENSAJE_NIVEL
        CALL PUT_STR                 ; Muestra mensaje de exito
               

        
        CALL CREAR_CADENA_ALEATORIA  ; Genera una nueva ronda
        MOV DX, OFFSET SALTO_DL
        CALL PUTS
        MOV AX, OFFSET RANDOM_CADENA
        CALL PUT_STR
        CALL DELAY_TEXT
        CALL LIMPIAR_PANTALLA
        MOV AX, OFFSET RESP1
        CALL GET_STR_TIMER

        CALL COMPARAR                ; Repetir el juego desde aqui

    PUT_STR: ; Exhibe el caracter terminado con 0 cuya direccion esta en AX
        PUSH AX ; Guarda registros
        PUSH BX
        PUSH CX
        PUSH DX
        MOV BX, AX ; Almacena direccion en BX
        MOV AL, BYTE PTR [BX] ; AL = primer caracter en el string

    PUT_LOOP: 
        CMP AL, 0 ; AL == 0 ?
        JE PUT_FIN ; Mientras AL != 0
        CALL PUTC ; Exhibe caracter
        INC BX ; BX = BX + 1
        MOV AL, BYTE PTR [BX] ; AL = siguiente caracter en el string
        JMP PUT_LOOP ; Repite la prueba del bucle           

    PUT_FIN:
        POP DX 
        POP CX
        POP BX
        POP AX
        RET
    GET_STR_TIMER: ; Lee el string terminado por CR o timeout en 15 segundos
        PUSH AX ; Guarda registros
        PUSH BX
        PUSH CX
        PUSH DX

        ; Captura la hora inicial en ticks
        MOV AH, 00h
        INT 1Ah
        MOV BX, DX ; Guarda los ticks iniciales en BX
         MOV SI, 0
    TIMER_LOOP:
        ; Calcula el tiempo transcurrido
        
        MOV AH, 00h
        INT 1Ah
        SUB DX, BX ; DX = Ticks transcurridos
        CMP DX, 165 ; 15 segundos en ticks (~18.2 ticks/segundo)
        JAE TIMEOUT ; Si el tiempo se agotó, termina el bucle

        ; Verifica si hay entrada del teclado
        MOV AH, 01h
        INT 16h
        ;JZ TIMER_LOOP ; Si no hay entrada, sigue verificando

        ; Lee el carácter si hay entrada
        ;MOV AH, 08h
        ;INT 21h
        CALL GETC
        CMP AL, 13 ; ¿Es Enter (CR)?
        JE GET_FIN_TIMER ; Si es Enter, termina

        ; Guarda el carácter en el buffer
        MOV [RESP1 + SI], AL ; Usa SI como índice para almacenar el carácter
        INC SI               ; Avanza al siguiente índice del buffer
        JMP TIMER_LOOP ; Sigue leyendo

    TIMEOUT:
        ; Si el tiempo se agotó, termina el string
       
        CALL END_PROGRAM

    GET_FIN_TIMER:
        MOV BYTE PTR [RESP1 + SI], 0 ; Termina la cadena con un NULL
        POP DX
        POP CX
        POP BX
        POP AX
        


   
    PUTC: ; Exhibe caracter en AL
        PUSH AX ; Guarda AX
        PUSH BX ; Guarda BX
        PUSH CX ; Guarda CX
        PUSH DX ; Guarda DX
        MOV DL, AL
        MOV AH, 2H
        INT 21H
        POP DX ; Repone DX
        POP CX ; Repone CX
        POP BX ; Repone BX
        POP AX ; Repone AX
        RET
          
    PUTS:
        PUSH AX ; Guarda AX
        PUSH BX ; Guarda BX
        PUSH CX ; Guarda CX
        PUSH DX ; Guarda DX
        MOV AH, 9H
        INT 21H
        POP DX ; Repone DX
        POP CX ; Repone CX
        POP BX ; Repone BX
        POP AX ; Repone AX
        RET   

    GETC: ; Lee caracter dentro de AL
        PUSH BX ; Guarda BX
        PUSH CX ; Guarda CX
        PUSH DX ; Guarda DX
        MOV AH, 1H
        INT 21H
        POP DX ; Repone DX
        POP CX ; Repone CX
        POP BX ; Repone BX
        RET   
          
    LIMPIAR_PANTALLA: ; Limpia la pantalla del MS-DOS
        PUSH AX ; Guarda AX
        PUSH BX ; Guarda BX
        PUSH CX ; Guarda CX
        PUSH DX ; Guarda DX
        MOV AH,00H
        MOV AL,03H       
        INT 10H
        POP DX ; Repone DX
        POP CX ; Repone CX
        POP BX ; Repone BX
        POP AX ; Repone AX    
        RET                   

    GET_RANDOM_NUM: ; Genera un numero aleatorio
        PUSH CX ; Guarda CX
        MOV AH, 0H ; Interrumpe para tener la hora en tiempo real del sistema
        INT 1AH ; La hora se guardarÃ¡ en DX
        POP CX ; Recupera el valor guardado en CX
        MOV AX, DX ; Mueve la hora a AX
        XOR DX, DX ; Limpia DX 
        MOV BX, 10 ; BX = 10 divisor para generar un numero entre 0 y 9
        DIV BX ; Divide AX con BX  
        MOV RANDOM_NUM, DX ; Se obtiene la divisiÃ³n de DL y lo guarda en variable RANDOM_NUM 
        RET   
                       
    CREAR_CADENA_ALEATORIA: ; Crea una cadena aleatoria
        PUSH AX ; Guarda registros
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI

        MOV CX, LENG_LISTA ; Tamamho de la cadena
        LEA DI, RANDOM_CADENA ; Carga la direccion donde se almacenarÃ¡ la cadena

    GENERAR_NUMERO:
        CALL GET_RANDOM_NUM ; Genera un numero aleatorio (0-9)
        MOV BX, 36 ; Queremos un rango de 0-35 para incluir numeros y letras
        DIV BX ; Divide AX entre 36
        CMP DL, 10 ; Compara si el numero es menor que 10
        JL ES_NUMERO ; Si es menor que 10, es un numero
        ADD DL, 'A' - 10 ; Si es mayor o igual a 10, conviÃ©rtelo en una letra (A-Z)
        JMP ALMACENAR

    ES_NUMERO:
        ADD DL, '0' ; Convierte el numero en caracter ASCII

    ALMACENAR:
        MOV [DI], DL ; Almacena el caracter en la cadena
        INC DI ; Avanza al siguiente espacio en la cadena
        LOOP GENERAR_NUMERO ; Repite hasta completar la longitud deseada

        MOV BYTE PTR [DI], 0 ; Termina la cadena con un caracter nulo
        POP DI
        POP SI
        POP DX
        POP CX
        POP BX
        POP AX
        RET
               
    DELAY_TEXT: ; Hace una pausa
        PUSH CX
        PUSH DX
        MOV AH,86H ; La funcion que hace esperar
        MOV CX,000FH ; En este caso un millÃ³n de microsegundos
        MOV DX,4240H
        INT 15H         
        POP DX
        POP CX
        RET        
      
    MOSTRAR_DOS_DIGITOS: ; Muestra un numero de dos dÃ­gitos almacenado en AL
        AAM ; Separa AX en decenas (AH) y unidades (AL)
        MOV BX, AX ; Guarda las decenas y unidades en BX
        
        MOV AH, 02H ; Prepara para mostrar un caracter
        MOV DL, BH ; BH contiene las decenas
        ADD DL, '0' ; Convierte a ASCII
        INT 21H ; Muestra el caracter
        
        MOV AH, 02H ; Prepara para mostrar un caracter
        MOV DL, BL ; BL contiene las unidades
        ADD DL, '0' ; Convierte a ASCII
        INT 21H ; Muestra el caracter
        RET
         
    PREGUNTAR_CONTINUAR: ; Pregunta si desea continuar
        PUSH BX
        PUSH CX
        PUSH DX
                              
        MOV DX, OFFSET MENSAJE_CONTINUAR   
        CALL PUTS ; Muestra el mensaje de pregunta
        CALL GETC ; Lee una tecla del usuario en AL
    
        POP DX
        POP CX
        POP BX
        RET
        
    ACIERTOS: ; Cuenta los aciertos
        MOV SI, 0 ; Inicializa el Ã­ndice a 0
        MOV CANT_ACIERTOS, 0 ; Inicializa el contador de aciertos a 0

    ACIERTOS_LOOP:
        MOV BH, RANDOM_CADENA[SI]
        CMP BH, 0 ; Verifica si es el final de la cadena
        JE ACIERTOS_FIN ; Si es el final, termina el bucle

        CMP RESP1[SI], BH ; Compara los caracteres
        JNE ACIERTOS_NEXT ; Si no son iguales, pasa al siguiente

        INC CANT_ACIERTOS ; Incrementa el contador de aciertos

    ACIERTOS_NEXT:
        INC SI ; Avanza al siguiente caracter
        JMP ACIERTOS_LOOP ; Repite el bucle

    ACIERTOS_FIN:
        RET ; Termina el procedimiento
        
    FELICIDADES: ; Muestra mensaje de felicitaciones
        CALL LIMPIAR_PANTALLA
        MOV DX, OFFSET MENSAJE_FELICIDADES
        CALL PUTS
        
        MOV DX, OFFSET LLEGASTE_NV
        CALL PUTS        
        MOV AX, OFFSET NIVEL
        CALL PUT_STR
             
        MOV DX, OFFSET MENSAJE_PUNTUACION
        CALL PUTS
        MOV AX, PUNTUACION
        CALL MOSTRAR_DOS_DIGITOS   
        
        MOV AX, 4C00H
        INT 21H ; Terminado, volver a DOS     
    COMPLETADO:
        CALL LIMPIAR_PANTALLA
        MOV DX, OFFSET MENSAJE_FELICIDADES
        CALL PUTS
        
        MOV DX, OFFSET MENSAJE_GANASTE
        CALL PUTS        
        
             
        MOV DX, OFFSET MENSAJE_PUNTUACION
        CALL PUTS
        MOV AX, PUNTUACION
        CALL MOSTRAR_DOS_DIGITOS   

        MOV AX, 4C00H
        INT 21H ; Finaliza el programa
    
    
    REINICIO:
        ; Limpia variables clave
        MOV NIVEL, '1',O
        MOV SI, 0                ; Reinicia índice de comparación
        MOV BYTE PTR [RESP1], 0  ; Limpia la entrada del usuario
        MOV BYTE PTR [RANDOM_CADENA], 0 ; Limpia la cadena generada
        MOV CANT_ACIERTOS, 0     ; Reinicia el contador de aciertos

        ; Muestra el nivel actual
        CALL LIMPIAR_PANTALLA
        MOV AX, OFFSET MENSAJE_NIVEL
        CALL PUT_STR
        MOV DX, OFFSET SALTO_DL
        CALL PUTS

        ; Generar nueva cadena aleatoria
        CALL CREAR_CADENA_ALEATORIA
        MOV AX, OFFSET RANDOM_CADENA
        CALL PUT_STR
        CALL DELAY_TEXT
        CALL LIMPIAR_PANTALLA

        ; Leer nueva respuesta del usuario
        MOV AX, OFFSET RESP1
        CALL GET_STR_TIMER

        ; Comparar cadenas
        CALL COMPARAR

                                 
    END_PROGRAM: ; Termina el programa
        CALL LIMPIAR_PANTALLA
        MOV DX, OFFSET ERROR
        CALL PUTS
    
        ; Muestra la respuesta correcta
        MOV DX, OFFSET MENSAJE_RESPUESTA
        CALL PUTS
        MOV AX, OFFSET RANDOM_CADENA
        CALL PUT_STR
        MOV DX, OFFSET SALTO_DL
        CALL PUTS
    
        ; Muestra lo que ingresó el usuario
        MOV DX, OFFSET MENSAJE_USUARIO
        CALL PUTS        
        MOV AX, OFFSET RESP1
        CALL PUT_STR
        MOV DX, OFFSET SALTO_DL
        CALL PUTS   
    
        ; Muestra aciertos
        CALL ACIERTOS
        MOV DX, OFFSET MENSAJE_CANT_ACIERTOS
        CALL PUTS
        MOV AX, CANT_ACIERTOS
        CALL MOSTRAR_DOS_DIGITOS
        MOV DX, OFFSET SALTO_DL
        CALL PUTS    
    
        ; Muestra nivel alcanzado
        MOV DX, OFFSET LLEGASTE_NV
        CALL PUTS        
        MOV AX, OFFSET NIVEL
        CALL PUT_STR
         
        MOV DX, OFFSET MENSAJE_PUNTUACION
        CALL PUTS
        MOV AX, PUNTUACION
        CALL MOSTRAR_DOS_DIGITOS 
        MOV DX, OFFSET SALTO_DL
        CALL PUTS  
    
        ; Pregunta si desea continuar
        CALL PREGUNTAR_CONTINUAR
        CMP AL, 'S'
        JE REINICIO  ; Si el usuario desea continuar, vuelve a REINICIO
    
        MOV AX, 4C00H
        INT 21H ; Si no desea continuar, termina el programa

   
END START