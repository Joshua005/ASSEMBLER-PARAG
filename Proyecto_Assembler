.MODEL SMALL
.STACK 256  

    CR EQU 13D
    LF EQU 10D 
    
.DATA    
    
    ;ARRAY---------------------------------------------------------------------
    RESP1 DB 80 DUP (0)
    RANDOM_NUM DW 0 ; VARIABLE PARA ALMACENAR EL NUMERO ALEATORIO             
    RANDOM_CADENA DB 80 DUP(0) ; ESPACIO PARA ALMACENAR LA CADENA GENERADA
    LENG_LISTA DW 5  
    
    ;TIEMPO--------------------------------------------------------------------
    TEMP DW 100  
    
    ;MENSAJES------------------------------------------------------------------
    SALTO_DL DB 13,10,'$'
    MENSAJE_NIVEL DB 'NIVEL ' 
    NIVEL DB '1', 0 
    ERROR DB 'PERDISTE', 13, 10, '$'  
    MENSAJE_CONTINUAR DB ' �DESEAS CONTINUAR AL SIGUIENTE NIVEL? (S/N): $'       
    MENSAJE_FELICIDADES DB 'FELICIDADES' , 13, 10, '$'
    LLEGASTE_NV DB 'LLEGASTE AL NIVEL $'
    MENSAJE_RESPUESTA DB 'RESPUESTA CORRECTA $'
    MENSAJE_USUARIO DB 'RESPUESTA INGRESADA $' 
        
    MENSAJE_PUNTUACION DB ', CON UNA PUNTUACION DE $' 
    PUNTUACION DW 0   
    CANT_ACIERTOS DW 0
    
.CODE       

START:  
    MOV AX, @DATA
    MOV DS, AX     
    
    ; MUESTRA EL NIVEL 1 EN EL QUE TE ENCUENTRAS
    MOV AX, OFFSET MENSAJE_NIVEL
    CALL PUT_STR
        
    ; REALIZA UN SALTO DE LISTA
    MOV DX, OFFSET SALTO_DL
    CALL PUTS
                  
    ; GENERAR LA CADENA ALEATORIA
    CALL CREAR_CADENA_ALEATORIA 

    ; MOSTRAR LA CADENA ALEATORIA EN PANTALLA
    MOV AX, OFFSET RANDOM_CADENA
    CALL PUT_STR
    CALL DELAY_TEXT

    ;LIMPIAR PANTALLA
    CALL LIMPIAR_PANTALLA  
    
    ;LEE LO QUE INGRESO EL USUARIO
    MOV AX, OFFSET RESP1      
    CALL GET_STR   
                      
    ;SETEA EL CONTADOR DE INDICES
    MOV SI, 0     
    
    ;COMPARA LO QUE ESTA EN PREG1 Y RESP1 
    CALL COMPARAR
                        
    CALL END_PROGRAM  ; FIN DEL PROGRAMA UNU 
    
    COMPARAR:         
         
        MOV BH, RANDOM_CADENA[SI] 
        
        MOV AL, BH
        CALL PUTC  
         
        CMP RESP1[SI], BH   
        
        ;SI SON IGUALES
        JE INCREMENTAR 
        
        ;SINO
        JMP END_PROGRAM  
    
    INCREMENTAR:
        INC SI                       ; AVANZA AL SIGUIENTE CAR�CTER   
        INC PUNTUACION               ; INCREMENTA EL PUNTAJE POR CADA ACIERTO 
        CMP RANDOM_CADENA[SI], 0     ; �HEMOS LLEGADO AL FINAL DE LA CADENA?
        JNE COMPARAR                 ; SI NO, SIGUE VERIFICANDO     
    
        ; SI TODA LA SECUENCIA ES CORRECTA
        CALL LIMPIAR_PANTALLA
        INC NIVEL                    ; INCREMENTA EL CONTADOR DE RONDAS 
        INC LENG_LISTA               ; AUMENTA LA LONGITUD DE LA LISTA
        ADD PUNTUACION, 10           ; AUMENTA PUNTOS POR NIVEL COMPLETADO
    
        MOV AX, OFFSET MENSAJE_NIVEL
        CALL PUT_STR                 ; MUESTRA MENSAJE DE �XITO
        CALL PREGUNTAR_CONTINUAR     ; PREGUNTA SI DESEA CONTINUAR
    
        CMP AL, 'N'                 ; �EL USUARIO DESEA SALIR? ('N' PARA SALIR)
        JE FELICIDADES            ; SI S�, TERMINA EL PROGRAMA

        ; SI DECIDE CONTINUAR
        CALL CREAR_CADENA_ALEATORIA  ; GENERA UNA NUEVA RONDA
        MOV DX, OFFSET SALTO_DL
        CALL PUTS
        MOV AX, OFFSET RANDOM_CADENA
        CALL PUT_STR
        CALL DELAY_TEXT
        CALL LIMPIAR_PANTALLA
        MOV AX, OFFSET RESP1
        CALL GET_STR

        CALL COMPARAR                ; REPETIR EL JUEGO DESDE AQU�

    PUT_STR: ; EXHIBE EL CARACTER TERMINADO CON 0 CUYA DIRECCION ESTA EN AX
        PUSH AX ; GUARDA REGISTROS
        PUSH BX
        PUSH CX
        PUSH DX
        MOV BX, AX ; ALMACENA DIRECCION EN BX
        MOV AL, BYTE PTR [BX] ; AL = PRIMER CARACTER EN EL STRING

    PUT_LOOP: CMP AL, 0 ; AL == 0 ?
        JE PUT_FIN ; MIENTRAS AL != 0
        CALL PUTC ; EXHIBE CARACTER
        INC BX ; BX = BX + 1
        MOV AL, BYTE PTR [BX] ; AL = SIGUIENTE CARACTER EN EL STRING
        JMP PUT_LOOP ; REPITE LA PRUEBA DEL BUCLE           
        

    PUT_FIN:
        POP DX ; 
        POP CX
        POP BX
        POP AX
        RET

    GET_STR: ;  LEE EL STRING TERMINADO POR CR DENTRO DEL ARREGLO CUYA DIRECCION ESTA EN AX
        PUSH AX ; GUARDA REGISTROS
        PUSH BX
        PUSH CX
        PUSH DX
        MOV BX, AX
        CALL GETC ; LEE EL PRIMER CARACTER
        MOV BYTE PTR [BX], AL ; EN C: STR[I] = AL

    GET_LOOP:
        CMP AL, 13 ; AL == CR ?
        JE GET_FIN ;MIENTRAS AL != CR
        INC BX ; BX = BX + 1
        CALL GETC ; LEE EL SIGUIENTE CARACTER
        MOV BYTE PTR [BX], AL ; IN C: STR[I] = AL      
        
        JMP GET_LOOP ; REPITE LA PRUEBA DEL BUCLE

    GET_FIN: MOV BYTE PTR [BX], 0 ; STRING TERMINADO CON 0
        POP DX 
        POP CX
        POP BX
        POP AX
        RET
    
    PUTC: ; EXHIBE CARACTER EN A1
        PUSH AX ; GUARDA AX
        PUSH BX ; GUARDA BX
        PUSH CX ; GUARDA CX
        PUSH DX ; GUARDA DX
        MOV DL, AL
        MOV AH, 2H
        INT 21H
        POP DX ; REPONE DX
        POP CX ; REPONE CX
        POP BX ; REPONE BX
        POP AX ;REPONE AX
        RET
          
    PUTS:
        PUSH AX ; GUARDA AX
        PUSH BX ; GUARDA BX
        PUSH CX ; GUARDA CX
        PUSH DX ; GUARDA DX
        MOV AH, 9H
        INT 21H
        POP DX ; REPONE DX
        POP CX ; REPONE CX
        POP BX ; REPONE BX
        POP AX ;REPONE AX
        RET   

    GETC: ; LEE CARACTER DENTRO DE AL
        PUSH BX ; GUARDA BX
        PUSH CX ;GUARDA CX
        PUSH DX ; GUARDA DX
        MOV AH, 1H
        INT 21H
        POP DX ; REPONE DX
        POP CX ; REPONE CX
        POP BX ; REPONE BX
        RET   
          
        
    LIMPIAR_PANTALLA:         ;LIMPIA LA PANTALLA DEL MS-DOS
        PUSH AX ; SAVE AX
        PUSH BX ; SAVE BX
        PUSH CX ; SAVE CX
        PUSH DX ; SAVE DX
        MOV AH,00H
        MOV AL,03H       
        INT 10H
        POP DX ; RESTORE DX
        POP CX ; RESTORE CX
        POP BX ; RESTORE BX
        POP AX ; RESTORE AX    
        RET                   
              
    GET_RANDOM_NUM:                      
        PUSH CX         ;GUARDO EN LA PILA EL VALOR DE CX
        MOV AH, 0H      ;INTERRUMPE PARA TENER LA HORA EN TIEMPO REAL DEL SISTEMA
        INT 1AH         ;LA HORA SE GUARDARA EN DX
        POP CX          ;RECUPERO EL VALOR GUARDADO EN CX
        MOV AX, DX      ;MOVER LA HORA A AX
        XOR DX, DX      ;LIMPIAR DX 
        MOV BX, 10      ; BX = 10 DIVISOR PARA GENERAR UN NUMERO ENTRE 0 Y 9
        DIV BX          ; DIVIDE AX CON BX  
       
        MOV RANDOM_NUM, DX ; SE OBTIENE LA DIVISION DE DL Y LO GUARDA EN VARIABLE RANDOM_NUM 
        RET   
                       
    CREAR_CADENA_ALEATORIA:
        PUSH AX       ; GUARDA REGISTROS
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI

        MOV CX, LENG_LISTA   ; TAMANHO DE LA CADENA (PUEDES CAMBIAR ESTE VALOR)
        LEA DI, RANDOM_CADENA ; CARGA LA DIRECCIóN DONDE SE ALMACENARá LA CADENA

    GENERAR_NUMERO:
        CALL GET_RANDOM_NUM ; GENERA UN NUMERO ALEATORIO (0-9)
        MOV BX, 36          ; QUEREMOS UN RANGO DE 0-35 PARA INCLUIR NúMEROS Y LETRAS
        DIV BX              ; DIVIDE AX ENTRE 36
        CMP DL, 10          ; COMPARA SI EL NUMERO ES MENOR QUE 10
        JL ES_NUMERO        ; SI ES MENOR QUE 10, ES UN NúMERO
        ADD DL, 'A' - 10    ; SI ES MAYOR O IGUAL A 10, CONVIéRTELO EN UNA LETRA (A-Z)
        JMP ALMACENAR

    ES_NUMERO:
        ADD DL, '0'         ; CONVIERTE EL NúMERO EN CARáCTER ASCII

    ALMACENAR:
        MOV [DI], DL        ; ALMACENA EL CARáCTER EN LA CADENA
        INC DI              ; AVANZA AL SIGUIENTE ESPACIO EN LA CADENA
        LOOP GENERAR_NUMERO ; REPITE HASTA COMPLETAR LA LONGITUD DESEADA

        MOV BYTE PTR [DI], 0 ; TERMINA LA CADENA CON UN CARáCTER NULO
        POP DI
        POP SI
        POP DX
        POP CX
        POP BX
        POP AX
        RET
               
    DELAY_TEXT:
        PUSH CX
        PUSH DX
        MOV AH,86H      ;LA FUNC QUE HACE ESPERAR
        MOV CX,000FH    ;EN ESTE CASO UN MILLON DE MICRO SEGUNDOS
        MOV DX,4240H
        INT 15H         
        POP DX
        POP CX
        RET        
      
    MOSTRAR_DOS_DIGITOS:
        ; MUESTRA UN N�MERO DE DOS D�GITOS ALMACENADO EN AL
        AAM                     ; SEPARA AX EN DECENAS (AH) Y UNIDADES (AL)
        MOV BX, AX              ; GUARDA LAS DECENAS Y UNIDADES EN BX
        
        MOV AH, 02H             ; PREPARA PARA MOSTRAR UN CAR�CTER
        MOV DL, BH              ; BH CONTIENE LAS DECENAS
        ADD DL, '0'             ; CONVIERTE A ASCII
        INT 21H                 ; MUESTRA EL CAR�CTER
        
        MOV AH, 02H             ; PREPARA PARA MOSTRAR UN CAR�CTER
        MOV DL, BL              ; BL CONTIENE LAS UNIDADES
        ADD DL, '0'             ; CONVIERTE A ASCII
        INT 21H                 ; MUESTRA EL CAR�CTER
        RET
         
    PREGUNTAR_CONTINUAR:
      
        PUSH BX
        PUSH CX
        PUSH DX
                              
        MOV DX, OFFSET MENSAJE_CONTINUAR   
        CALL PUTS                     ; MUESTRA EL MENSAJE DE PREGUNTA
        CALL GETC                     ; LEE UNA TECLA DEL USUARIO EN AL
    
        POP DX
        POP CX
        POP BX
      
        RET
        
    ACIERTOS:
        MOV SI, 0                ; Inicializa el índice a 0
        MOV CANT_ACIERTOS, 0     ; Inicializa el contador de aciertos a 0

    ACIERTOS_LOOP:
        MOV BH, RANDOM_CADENA[SI]
        CMP BH, 0                ; Verifica si es el final de la cadena
        JE ACIERTOS_FIN           ; Si es el final, termina el bucle

        CMP RESP1[SI], BH        ; Compara los caracteres
        JNE ACIERTOS_NEXT         ; Si no son iguales, pasa al siguiente

        INC CANT_ACIERTOS        ; Incrementa el contador de aciertos

    ACIERTOS_NEXT:
        INC SI                   ; Avanza al siguiente carácter
        JMP ACIERTOS_LOOP         ; Repite el bucle

    ACIERTOS_FIN:
        RET                      ; Termina el procedimiento
        
    FELICIDADES:
        CALL LIMPIAR_PANTALLA
        MOV DX, OFFSET MENSAJE_FELICIDADES
        CALL PUTS
        
        MOV DX, OFFSET LLEGASTE_NV
        CALL PUTS        
        MOV AX, OFFSET NIVEL
        CALL PUT_STR
             
        MOV DX, OFFSET MENSAJE_PUNTUACION
        CALL PUTS
        MOV AX, PUNTUACION
        CALL MOSTRAR_DOS_DIGITOS   
        
        MOV AX, 4C00H
        INT 21H ; TERMINADO, VOLVER A DOS     
                                  
    END_PROGRAM:
        CALL LIMPIAR_PANTALLA
        MOV DX, OFFSET ERROR
        CALL PUTS
        
        MOV DX, OFFSET MENSAJE_RESPUESTA
        CALL PUTS
        
        MOV AX, OFFSET RANDOM_CADENA
        CALL PUT_STR
        
        MOV DX, OFFSET SALTO_DL
        CALL PUTS
          
        MOV DX, OFFSET MENSAJE_USUARIO
        CALL PUTS        
        
        MOV AX,  OFFSET RESP1
        CALL PUT_STR
          
        MOV DX, OFFSET SALTO_DL
        CALL PUTS   
                           
        CALL ACIERTOS
        MOV AX, CANT_ACIERTOS
        CALL MOSTRAR_DOS_DIGITOS
        MOV DX, OFFSET SALTO_DL
        CALL PUTS        
               
        MOV DX, OFFSET LLEGASTE_NV
        CALL PUTS        
        MOV AX, OFFSET NIVEL
        CALL PUT_STR
             
        MOV DX, OFFSET MENSAJE_PUNTUACION
        CALL PUTS
        MOV AX, PUNTUACION
        CALL MOSTRAR_DOS_DIGITOS 
        
        MOV AX, 4C00H
        INT 21H ; TERMINADO, VOLVER A DOS 
         
END START
